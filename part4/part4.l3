#lang racket/base

 ;4.1

 ;Signature: append(l1,l2)
 ;Type:[list * list -> list]
 ;Purpose: gets two lists and returns their concatenation
 ;Pre-conditions: true
 ;Post-conditions : result = '(l1[0] ... l1[l1.length-1] l2[0] ... l2[l2.length-1])
 ;Example: (append '(1 2 3) '(1 2 3)) should produce '(1 2 3 1 2 3)
 ;Tests:(append '(1 2) '(3 4)) ==> '(1 2 3 4) 
 

(define (append l1 l2)
  (if (null? l1)
      l2  
      (cons (car l1) 
            (append (cdr l1) l2))))



 ;4.2:

 ;Signature: reverse(l)
 ;Type:[list -> list]
 ;Purpose: gets a list and reverses it
 ;Pre-conditions:true
 ;Post-conditions: result = '(l[l.lenght-1]  ...  l[0])
 ;Example: (reverse '(1 2 3)) should produce '(3 2 1).
 ;Tests:(reverse '(1 2 3)) ==> '(3 2 1)

(define (reverse lst)
  (define (helper lst res)
    (if (null? lst)
        res  
        (helper (cdr lst) (cons (car lst) res)))) 
  (helper lst '()))





;4.3:

;Signature: duplicate-items(lst, dup-count)
;Type: [list * list(Number) -> list ]
;Purpose: gets a list and a Number list and according to the place in the first list, duplicates the member of that list a number of times as shown in the Number list.
;Pre-conditions: each member of dup-count is a natural Number and dup-count isn't empty
;Post-conditions: 
;Example: (duplicate-items '(1 2 3) '(1 0 2)) should produce '(1 3 3)
;Test: (duplicate-items '(1 2 3 4) '(1 2 3 4))==> '(1 2 2 3 3 3 4 4 4 4)

(define (helper lst dup-count len i)
  (if (null? lst)
      '()  
      (let* ((curr (car lst)) 
             (count-index (modulo i len))  
             (item-i (list-ref dup-count count-index))  
             (duplicated-items (make-list item-i curr)))  
        (append duplicated-items  
                (helper (cdr lst) dup-count len (+ i 1)))))) 


(define (duplicate-items lst dup-count)
  (let ((dup-count-len (length dup-count)))  ; Get the length of dup-count
    (helper lst dup-count dup-count-len 0)))  ; Start recursion with lst and index 0
